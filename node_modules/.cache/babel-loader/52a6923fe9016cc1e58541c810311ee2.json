{"ast":null,"code":"import useQueryWithStore from './useQueryWithStore';\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true }\n * - error: { error: [error from response], loading: false, loaded: true }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success of failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded }.\n *\n * @example\n *\n * import { useGetList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, ids, loading, error } = useGetList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].title}</li>\n *     )}</ul>;\n * };\n */\n\nvar useGetList = function (resource, pagination, sort, filter, options) {\n  if (options && options.action) {\n    throw new Error('useGetList() does not support custom action names. Use useQueryWithStore() and your own Redux selectors if you need a custom action name for a getList query');\n  }\n\n  var key = JSON.stringify({\n    type: 'GET_LIST',\n    resource: resource,\n    payload: {\n      pagination: pagination,\n      sort: sort,\n      filter: filter\n    }\n  });\n\n  var _a = useQueryWithStore({\n    type: 'getList',\n    resource: resource,\n    payload: {\n      pagination: pagination,\n      sort: sort,\n      filter: filter\n    }\n  }, options, function (state) {\n    return state.admin.customQueries[key] ? state.admin.customQueries[key].data : null;\n  }, function (state) {\n    return state.admin.customQueries[key] ? state.admin.customQueries[key].total : null;\n  }),\n      data = _a.data,\n      total = _a.total,\n      error = _a.error,\n      loading = _a.loading,\n      loaded = _a.loaded;\n\n  var ids = data ? data.map(function (record) {\n    return record.id;\n  }) : [];\n  var dataObject = data ? data.reduce(function (acc, next) {\n    acc[next.id] = next;\n    return acc;\n  }, {}) : {};\n  return {\n    data: dataObject,\n    ids: ids,\n    total: total,\n    error: error,\n    loading: loading,\n    loaded: loaded\n  };\n};\n\nexport default useGetList;","map":{"version":3,"sources":["/home/ubuntu/truck-rewards/node_modules/ra-core/esm/dataProvider/useGetList.js"],"names":["useQueryWithStore","useGetList","resource","pagination","sort","filter","options","action","Error","key","JSON","stringify","type","payload","_a","state","admin","customQueries","data","total","error","loading","loaded","ids","map","record","id","dataObject","reduce","acc","next"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,IAAIC,UAAU,GAAG,UAAUC,QAAV,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,MAAtC,EAA8CC,OAA9C,EAAuD;AACpE,MAAIA,OAAO,IAAIA,OAAO,CAACC,MAAvB,EAA+B;AAC3B,UAAM,IAAIC,KAAJ,CAAU,8JAAV,CAAN;AACH;;AACD,MAAIC,GAAG,GAAGC,IAAI,CAACC,SAAL,CAAe;AACrBC,IAAAA,IAAI,EAAE,UADe;AAErBV,IAAAA,QAAQ,EAAEA,QAFW;AAGrBW,IAAAA,OAAO,EAAE;AAAEV,MAAAA,UAAU,EAAEA,UAAd;AAA0BC,MAAAA,IAAI,EAAEA,IAAhC;AAAsCC,MAAAA,MAAM,EAAEA;AAA9C;AAHY,GAAf,CAAV;;AAKA,MAAIS,EAAE,GAAGd,iBAAiB,CAAC;AAAEY,IAAAA,IAAI,EAAE,SAAR;AAAmBV,IAAAA,QAAQ,EAAEA,QAA7B;AAAuCW,IAAAA,OAAO,EAAE;AAAEV,MAAAA,UAAU,EAAEA,UAAd;AAA0BC,MAAAA,IAAI,EAAEA,IAAhC;AAAsCC,MAAAA,MAAM,EAAEA;AAA9C;AAAhD,GAAD,EAA2GC,OAA3G,EAAoH,UAAUS,KAAV,EAAiB;AAC3J,WAAOA,KAAK,CAACC,KAAN,CAAYC,aAAZ,CAA0BR,GAA1B,IACDM,KAAK,CAACC,KAAN,CAAYC,aAAZ,CAA0BR,GAA1B,EAA+BS,IAD9B,GAED,IAFN;AAGH,GAJyB,EAIvB,UAAUH,KAAV,EAAiB;AAChB,WAAOA,KAAK,CAACC,KAAN,CAAYC,aAAZ,CAA0BR,GAA1B,IACDM,KAAK,CAACC,KAAN,CAAYC,aAAZ,CAA0BR,GAA1B,EAA+BU,KAD9B,GAED,IAFN;AAGH,GARyB,CAA1B;AAAA,MAQID,IAAI,GAAGJ,EAAE,CAACI,IARd;AAAA,MAQoBC,KAAK,GAAGL,EAAE,CAACK,KAR/B;AAAA,MAQsCC,KAAK,GAAGN,EAAE,CAACM,KARjD;AAAA,MAQwDC,OAAO,GAAGP,EAAE,CAACO,OARrE;AAAA,MAQ8EC,MAAM,GAAGR,EAAE,CAACQ,MAR1F;;AASA,MAAIC,GAAG,GAAGL,IAAI,GAAGA,IAAI,CAACM,GAAL,CAAS,UAAUC,MAAV,EAAkB;AAAE,WAAOA,MAAM,CAACC,EAAd;AAAmB,GAAhD,CAAH,GAAuD,EAArE;AACA,MAAIC,UAAU,GAAGT,IAAI,GACfA,IAAI,CAACU,MAAL,CAAY,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAC/BD,IAAAA,GAAG,CAACC,IAAI,CAACJ,EAAN,CAAH,GAAeI,IAAf;AACA,WAAOD,GAAP;AACH,GAHC,EAGC,EAHD,CADe,GAKf,EALN;AAMA,SAAO;AAAEX,IAAAA,IAAI,EAAES,UAAR;AAAoBJ,IAAAA,GAAG,EAAEA,GAAzB;AAA8BJ,IAAAA,KAAK,EAAEA,KAArC;AAA4CC,IAAAA,KAAK,EAAEA,KAAnD;AAA0DC,IAAAA,OAAO,EAAEA,OAAnE;AAA4EC,IAAAA,MAAM,EAAEA;AAApF,GAAP;AACH,CA1BD;;AA2BA,eAAerB,UAAf","sourcesContent":["import useQueryWithStore from './useQueryWithStore';\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true }\n * - error: { error: [error from response], loading: false, loaded: true }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success of failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded }.\n *\n * @example\n *\n * import { useGetList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, ids, loading, error } = useGetList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].title}</li>\n *     )}</ul>;\n * };\n */\nvar useGetList = function (resource, pagination, sort, filter, options) {\n    if (options && options.action) {\n        throw new Error('useGetList() does not support custom action names. Use useQueryWithStore() and your own Redux selectors if you need a custom action name for a getList query');\n    }\n    var key = JSON.stringify({\n        type: 'GET_LIST',\n        resource: resource,\n        payload: { pagination: pagination, sort: sort, filter: filter },\n    });\n    var _a = useQueryWithStore({ type: 'getList', resource: resource, payload: { pagination: pagination, sort: sort, filter: filter } }, options, function (state) {\n        return state.admin.customQueries[key]\n            ? state.admin.customQueries[key].data\n            : null;\n    }, function (state) {\n        return state.admin.customQueries[key]\n            ? state.admin.customQueries[key].total\n            : null;\n    }), data = _a.data, total = _a.total, error = _a.error, loading = _a.loading, loaded = _a.loaded;\n    var ids = data ? data.map(function (record) { return record.id; }) : [];\n    var dataObject = data\n        ? data.reduce(function (acc, next) {\n            acc[next.id] = next;\n            return acc;\n        }, {})\n        : {};\n    return { data: dataObject, ids: ids, total: total, error: error, loading: loading, loaded: loaded };\n};\nexport default useGetList;\n"]},"metadata":{},"sourceType":"module"}