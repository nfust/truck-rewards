{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useCallback, useEffect, useRef, useMemo, isValidElement } from 'react';\nimport Downshift from 'downshift';\nimport classNames from 'classnames';\nimport get from 'lodash/get';\nimport { makeStyles, TextField, Chip } from '@material-ui/core';\nimport { useInput, FieldTitle, useSuggestions, warning } from 'ra-core';\nimport InputHelperText from './InputHelperText';\nimport AutocompleteSuggestionList from './AutocompleteSuggestionList';\nimport AutocompleteSuggestionItem from './AutocompleteSuggestionItem';\n/**\n * An Input component for an autocomplete field, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <AutocompleteArrayInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <AutocompleteArrayInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <AutocompleteArrayInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * Note that you must also specify the `matchSuggestion` prop\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue);\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <SelectInput source=\"gender\" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} />\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <AutocompleteArrayInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <TextField> component\n *\n * @example\n * <AutocompleteArrayInput source=\"author_id\" options={{ color: 'secondary' }} />\n */\n\nvar AutocompleteArrayInput = function (_a) {\n  var allowDuplicates = _a.allowDuplicates,\n      allowEmpty = _a.allowEmpty,\n      classesOverride = _a.classes,\n      _b = _a.choices,\n      choices = _b === void 0 ? [] : _b,\n      emptyText = _a.emptyText,\n      emptyValue = _a.emptyValue,\n      format = _a.format,\n      fullWidth = _a.fullWidth,\n      helperText = _a.helperText,\n      idOverride = _a.id,\n      inputOverride = _a.input,\n      isRequiredOverride = _a.isRequired,\n      label = _a.label,\n      limitChoicesToValue = _a.limitChoicesToValue,\n      margin = _a.margin,\n      matchSuggestion = _a.matchSuggestion,\n      metaOverride = _a.meta,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      onFocus = _a.onFocus,\n      _c = _a.options,\n      _d = _c === void 0 ? {} : _c,\n      suggestionsContainerProps = _d.suggestionsContainerProps,\n      labelProps = _d.labelProps,\n      InputProps = _d.InputProps,\n      options = __rest(_d, [\"suggestionsContainerProps\", \"labelProps\", \"InputProps\"]),\n      _e = _a.optionText,\n      optionText = _e === void 0 ? 'name' : _e,\n      _f = _a.optionValue,\n      optionValue = _f === void 0 ? 'id' : _f,\n      parse = _a.parse,\n      resource = _a.resource,\n      setFilter = _a.setFilter,\n      shouldRenderSuggestionsOverride = _a.shouldRenderSuggestions,\n      source = _a.source,\n      suggestionLimit = _a.suggestionLimit,\n      _g = _a.translateChoice,\n      translateChoice = _g === void 0 ? true : _g,\n      validate = _a.validate,\n      _h = _a.variant,\n      variant = _h === void 0 ? 'filled' : _h,\n      rest = __rest(_a, [\"allowDuplicates\", \"allowEmpty\", \"classes\", \"choices\", \"emptyText\", \"emptyValue\", \"format\", \"fullWidth\", \"helperText\", \"id\", \"input\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"margin\", \"matchSuggestion\", \"meta\", \"onBlur\", \"onChange\", \"onFocus\", \"options\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"setFilter\", \"shouldRenderSuggestions\", \"source\", \"suggestionLimit\", \"translateChoice\", \"validate\", \"variant\"]);\n\n  warning(isValidElement(optionText) && !matchSuggestion, \"If the optionText prop is a React element, you must also specify the matchSuggestion prop:\\n<AutocompleteInput\\n    matchSuggestion={(filterValue, suggestion) => true}\\n/>\\n        \");\n  var classes = useStyles({\n    classes: classesOverride\n  });\n  var inputEl = useRef();\n  var anchorEl = useRef();\n\n  var _j = useInput(__assign({\n    format: format,\n    id: idOverride,\n    input: inputOverride,\n    meta: metaOverride,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    parse: parse,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      id = _j.id,\n      input = _j.input,\n      isRequired = _j.isRequired,\n      _k = _j.meta,\n      touched = _k.touched,\n      error = _k.error;\n\n  var _l = React.useState(''),\n      filterValue = _l[0],\n      setFilterValue = _l[1];\n\n  var getSuggestionFromValue = useCallback(function (value) {\n    return choices.find(function (choice) {\n      return get(choice, optionValue) === value;\n    });\n  }, [choices, optionValue]);\n  var selectedItems = useMemo(function () {\n    return (input.value || []).map(getSuggestionFromValue);\n  }, [input.value, getSuggestionFromValue]);\n\n  var _m = useSuggestions({\n    allowDuplicates: allowDuplicates,\n    allowEmpty: allowEmpty,\n    choices: choices,\n    emptyText: emptyText,\n    emptyValue: emptyValue,\n    limitChoicesToValue: limitChoicesToValue,\n    matchSuggestion: matchSuggestion,\n    optionText: optionText,\n    optionValue: optionValue,\n    selectedItem: selectedItems,\n    suggestionLimit: suggestionLimit,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _m.getChoiceText,\n      getChoiceValue = _m.getChoiceValue,\n      getSuggestions = _m.getSuggestions;\n\n  var handleFilterChange = useCallback(function (eventOrValue) {\n    var event = eventOrValue;\n    var value = event.target ? event.target.value : eventOrValue;\n    setFilterValue(value);\n\n    if (setFilter) {\n      setFilter(value);\n    }\n  }, [setFilter, setFilterValue]); // We must reset the filter every time the value changes to ensure we\n  // display at least some choices even if the input has a value.\n  // Otherwise, it would only display the currently selected one and the user\n  // would have to first clear the input before seeing any other choices\n\n  useEffect(function () {\n    handleFilterChange('');\n  }, [input.value, handleFilterChange]);\n  var handleKeyDown = useCallback(function (event) {\n    // Remove latest item from array when user hits backspace with no text\n    if (selectedItems.length && !filterValue.length && event.key === 'Backspace') {\n      var newSelectedItems = selectedItems.slice(0, selectedItems.length - 1);\n      input.onChange(newSelectedItems.map(getChoiceValue));\n    }\n  }, [filterValue.length, getChoiceValue, input, selectedItems]);\n  var handleChange = useCallback(function (item) {\n    var newSelectedItems = !allowDuplicates && selectedItems.includes(item) ? selectedItems.slice() : selectedItems.concat([item]);\n    setFilterValue('');\n    input.onChange(newSelectedItems.map(getChoiceValue));\n  }, [allowDuplicates, getChoiceValue, input, selectedItems, setFilterValue]);\n  var handleDelete = useCallback(function (item) {\n    return function () {\n      var newSelectedItems = selectedItems.slice();\n      newSelectedItems.splice(newSelectedItems.indexOf(item), 1);\n      input.onChange(newSelectedItems.map(getChoiceValue));\n    };\n  }, [input, selectedItems, getChoiceValue]); // This function ensures that the suggestion list stay aligned to the\n  // input element even if it moves (because user scrolled for example)\n\n  var updateAnchorEl = function () {\n    if (!inputEl.current) {\n      return;\n    }\n\n    var inputPosition = inputEl.current.getBoundingClientRect(); // It works by implementing a mock element providing the only method used\n    // by the PopOver component, getBoundingClientRect, which will return a\n    // position based on the input position\n\n    if (!anchorEl.current) {\n      anchorEl.current = {\n        getBoundingClientRect: function () {\n          return inputPosition;\n        }\n      };\n    } else {\n      var anchorPosition = anchorEl.current.getBoundingClientRect();\n\n      if (anchorPosition.x !== inputPosition.x || anchorPosition.y !== inputPosition.y) {\n        anchorEl.current = {\n          getBoundingClientRect: function () {\n            return inputPosition;\n          }\n        };\n      }\n    }\n  };\n\n  var storeInputRef = function (input) {\n    inputEl.current = input;\n    updateAnchorEl();\n  };\n\n  var handleBlur = useCallback(function (event) {\n    setFilterValue('');\n    handleFilterChange('');\n    input.onBlur(event);\n  }, [handleFilterChange, input, setFilterValue]);\n  var handleFocus = useCallback(function (openMenu) {\n    return function (event) {\n      openMenu(event);\n      input.onFocus(event);\n    };\n  }, [input]);\n  var handleClick = useCallback(function (openMenu) {\n    return function (event) {\n      if (event.target === inputEl.current) {\n        openMenu(event);\n      }\n    };\n  }, []);\n\n  var shouldRenderSuggestions = function (val) {\n    if (shouldRenderSuggestionsOverride !== undefined && typeof shouldRenderSuggestionsOverride === 'function') {\n      return shouldRenderSuggestionsOverride(val);\n    }\n\n    return true;\n  };\n\n  return React.createElement(Downshift, __assign({\n    inputValue: filterValue,\n    onChange: handleChange,\n    selectedItem: selectedItems,\n    itemToString: function (item) {\n      return getChoiceValue(item);\n    }\n  }, rest), function (_a) {\n    var _b, _c;\n\n    var getInputProps = _a.getInputProps,\n        getItemProps = _a.getItemProps,\n        getLabelProps = _a.getLabelProps,\n        getMenuProps = _a.getMenuProps,\n        isOpen = _a.isOpen,\n        suggestionFilter = _a.inputValue,\n        highlightedIndex = _a.highlightedIndex,\n        openMenu = _a.openMenu;\n    var isMenuOpen = isOpen && shouldRenderSuggestions(suggestionFilter);\n\n    var _d = getInputProps({\n      onBlur: handleBlur,\n      onFocus: handleFocus(openMenu),\n      onClick: handleClick(openMenu),\n      onKeyDown: handleKeyDown\n    }),\n        idFromDownshift = _d.id,\n        onBlur = _d.onBlur,\n        onChange = _d.onChange,\n        onFocus = _d.onFocus,\n        ref = _d.ref,\n        inputProps = __rest(_d, [\"id\", \"onBlur\", \"onChange\", \"onFocus\", \"ref\"]);\n\n    return React.createElement(\"div\", {\n      className: classes.container\n    }, React.createElement(TextField, __assign({\n      id: id,\n      fullWidth: fullWidth,\n      InputProps: {\n        inputRef: storeInputRef,\n        classes: {\n          root: classNames(classes.inputRoot, (_b = {}, _b[classes.inputRootFilled] = variant === 'filled', _b)),\n          input: classes.inputInput\n        },\n        startAdornment: React.createElement(\"div\", {\n          className: classNames((_c = {}, _c[classes.chipContainerFilled] = variant === 'filled', _c))\n        }, selectedItems.map(function (item, index) {\n          return React.createElement(Chip, {\n            key: index,\n            tabIndex: -1,\n            label: getChoiceText(item),\n            className: classes.chip,\n            onDelete: handleDelete(item)\n          });\n        })),\n        onBlur: onBlur,\n        onChange: function (event) {\n          handleFilterChange(event);\n          onChange(event);\n        },\n        onFocus: onFocus\n      },\n      error: !!(touched && error),\n      label: React.createElement(FieldTitle, __assign({\n        label: label\n      }, labelProps, {\n        source: source,\n        resource: resource,\n        isRequired: typeof isRequiredOverride !== 'undefined' ? isRequiredOverride : isRequired\n      })),\n      InputLabelProps: getLabelProps({\n        htmlFor: id\n      }),\n      helperText: touched && error || helperText ? React.createElement(InputHelperText, {\n        touched: touched,\n        error: error,\n        helperText: helperText\n      }) : null,\n      variant: variant,\n      margin: margin\n    }, inputProps, options)), React.createElement(AutocompleteSuggestionList, {\n      isOpen: isMenuOpen,\n      menuProps: getMenuProps({}, // https://github.com/downshift-js/downshift/issues/235\n      {\n        suppressRefError: true\n      }),\n      inputEl: inputEl.current,\n      suggestionsContainerProps: suggestionsContainerProps\n    }, getSuggestions(suggestionFilter).map(function (suggestion, index) {\n      return React.createElement(AutocompleteSuggestionItem, __assign({\n        key: getChoiceValue(suggestion),\n        suggestion: suggestion,\n        index: index,\n        highlightedIndex: highlightedIndex,\n        isSelected: selectedItems.map(getChoiceValue).includes(getChoiceValue(suggestion)),\n        filterValue: filterValue,\n        getSuggestionText: getChoiceText\n      }, getItemProps({\n        item: suggestion\n      })));\n    })));\n  });\n};\n\nvar useStyles = makeStyles(function (theme) {\n  var chipBackgroundColor = theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)';\n  return {\n    root: {\n      flexGrow: 1,\n      height: 250\n    },\n    container: {\n      flexGrow: 1,\n      position: 'relative'\n    },\n    paper: {\n      position: 'absolute',\n      zIndex: 1,\n      marginTop: theme.spacing(1),\n      left: 0,\n      right: 0\n    },\n    chip: {\n      margin: theme.spacing(0.5, 0.5, 0.5, 0)\n    },\n    chipContainerFilled: {\n      margin: '27px 12px 10px 0'\n    },\n    inputRoot: {\n      flexWrap: 'wrap'\n    },\n    inputRootFilled: {\n      flexWrap: 'wrap',\n      '& $chip': {\n        backgroundColor: chipBackgroundColor\n      }\n    },\n    inputInput: {\n      width: 'auto',\n      flexGrow: 1\n    },\n    divider: {\n      height: theme.spacing(2)\n    }\n  };\n}, {\n  name: 'RaAutocompleteArrayInput'\n});\nexport default AutocompleteArrayInput;","map":{"version":3,"sources":["/home/ubuntu/truck-rewards/node_modules/ra-ui-materialui/esm/input/AutocompleteArrayInput.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","useCallback","useEffect","useRef","useMemo","isValidElement","Downshift","classNames","get","makeStyles","TextField","Chip","useInput","FieldTitle","useSuggestions","warning","InputHelperText","AutocompleteSuggestionList","AutocompleteSuggestionItem","AutocompleteArrayInput","_a","allowDuplicates","allowEmpty","classesOverride","classes","_b","choices","emptyText","emptyValue","format","fullWidth","helperText","idOverride","id","inputOverride","input","isRequiredOverride","isRequired","label","limitChoicesToValue","margin","matchSuggestion","metaOverride","meta","onBlur","onChange","onFocus","_c","options","_d","suggestionsContainerProps","labelProps","InputProps","_e","optionText","_f","optionValue","parse","resource","setFilter","shouldRenderSuggestionsOverride","shouldRenderSuggestions","source","suggestionLimit","_g","translateChoice","validate","_h","variant","rest","useStyles","inputEl","anchorEl","_j","_k","touched","error","_l","useState","filterValue","setFilterValue","getSuggestionFromValue","value","find","choice","selectedItems","map","_m","selectedItem","getChoiceText","getChoiceValue","getSuggestions","handleFilterChange","eventOrValue","event","target","handleKeyDown","key","newSelectedItems","slice","handleChange","item","includes","concat","handleDelete","splice","updateAnchorEl","current","inputPosition","getBoundingClientRect","anchorPosition","x","y","storeInputRef","handleBlur","handleFocus","openMenu","handleClick","val","undefined","createElement","inputValue","itemToString","getInputProps","getItemProps","getLabelProps","getMenuProps","isOpen","suggestionFilter","highlightedIndex","isMenuOpen","onClick","onKeyDown","idFromDownshift","ref","inputProps","className","container","inputRef","root","inputRoot","inputRootFilled","inputInput","startAdornment","chipContainerFilled","index","tabIndex","chip","onDelete","InputLabelProps","htmlFor","menuProps","suppressRefError","suggestion","isSelected","getSuggestionText","theme","chipBackgroundColor","palette","type","flexGrow","height","position","paper","zIndex","marginTop","spacing","left","right","flexWrap","backgroundColor","width","divider","name"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { useCallback, useEffect, useRef, useMemo, isValidElement, } from 'react';\nimport Downshift from 'downshift';\nimport classNames from 'classnames';\nimport get from 'lodash/get';\nimport { makeStyles, TextField, Chip } from '@material-ui/core';\nimport { useInput, FieldTitle, useSuggestions, warning, } from 'ra-core';\nimport InputHelperText from './InputHelperText';\nimport AutocompleteSuggestionList from './AutocompleteSuggestionList';\nimport AutocompleteSuggestionItem from './AutocompleteSuggestionItem';\n/**\n * An Input component for an autocomplete field, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <AutocompleteArrayInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <AutocompleteArrayInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <AutocompleteArrayInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * Note that you must also specify the `matchSuggestion` prop\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue);\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <SelectInput source=\"gender\" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} />\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <AutocompleteArrayInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <TextField> component\n *\n * @example\n * <AutocompleteArrayInput source=\"author_id\" options={{ color: 'secondary' }} />\n */\nvar AutocompleteArrayInput = function (_a) {\n    var allowDuplicates = _a.allowDuplicates, allowEmpty = _a.allowEmpty, classesOverride = _a.classes, _b = _a.choices, choices = _b === void 0 ? [] : _b, emptyText = _a.emptyText, emptyValue = _a.emptyValue, format = _a.format, fullWidth = _a.fullWidth, helperText = _a.helperText, idOverride = _a.id, inputOverride = _a.input, isRequiredOverride = _a.isRequired, label = _a.label, limitChoicesToValue = _a.limitChoicesToValue, margin = _a.margin, matchSuggestion = _a.matchSuggestion, metaOverride = _a.meta, onBlur = _a.onBlur, onChange = _a.onChange, onFocus = _a.onFocus, _c = _a.options, _d = _c === void 0 ? {} : _c, suggestionsContainerProps = _d.suggestionsContainerProps, labelProps = _d.labelProps, InputProps = _d.InputProps, options = __rest(_d, [\"suggestionsContainerProps\", \"labelProps\", \"InputProps\"]), _e = _a.optionText, optionText = _e === void 0 ? 'name' : _e, _f = _a.optionValue, optionValue = _f === void 0 ? 'id' : _f, parse = _a.parse, resource = _a.resource, setFilter = _a.setFilter, shouldRenderSuggestionsOverride = _a.shouldRenderSuggestions, source = _a.source, suggestionLimit = _a.suggestionLimit, _g = _a.translateChoice, translateChoice = _g === void 0 ? true : _g, validate = _a.validate, _h = _a.variant, variant = _h === void 0 ? 'filled' : _h, rest = __rest(_a, [\"allowDuplicates\", \"allowEmpty\", \"classes\", \"choices\", \"emptyText\", \"emptyValue\", \"format\", \"fullWidth\", \"helperText\", \"id\", \"input\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"margin\", \"matchSuggestion\", \"meta\", \"onBlur\", \"onChange\", \"onFocus\", \"options\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"setFilter\", \"shouldRenderSuggestions\", \"source\", \"suggestionLimit\", \"translateChoice\", \"validate\", \"variant\"]);\n    warning(isValidElement(optionText) && !matchSuggestion, \"If the optionText prop is a React element, you must also specify the matchSuggestion prop:\\n<AutocompleteInput\\n    matchSuggestion={(filterValue, suggestion) => true}\\n/>\\n        \");\n    var classes = useStyles({ classes: classesOverride });\n    var inputEl = useRef();\n    var anchorEl = useRef();\n    var _j = useInput(__assign({ format: format, id: idOverride, input: inputOverride, meta: metaOverride, onBlur: onBlur,\n        onChange: onChange,\n        onFocus: onFocus,\n        parse: parse,\n        resource: resource,\n        source: source,\n        validate: validate }, rest)), id = _j.id, input = _j.input, isRequired = _j.isRequired, _k = _j.meta, touched = _k.touched, error = _k.error;\n    var _l = React.useState(''), filterValue = _l[0], setFilterValue = _l[1];\n    var getSuggestionFromValue = useCallback(function (value) { return choices.find(function (choice) { return get(choice, optionValue) === value; }); }, [choices, optionValue]);\n    var selectedItems = useMemo(function () { return (input.value || []).map(getSuggestionFromValue); }, [input.value, getSuggestionFromValue]);\n    var _m = useSuggestions({\n        allowDuplicates: allowDuplicates,\n        allowEmpty: allowEmpty,\n        choices: choices,\n        emptyText: emptyText,\n        emptyValue: emptyValue,\n        limitChoicesToValue: limitChoicesToValue,\n        matchSuggestion: matchSuggestion,\n        optionText: optionText,\n        optionValue: optionValue,\n        selectedItem: selectedItems,\n        suggestionLimit: suggestionLimit,\n        translateChoice: translateChoice,\n    }), getChoiceText = _m.getChoiceText, getChoiceValue = _m.getChoiceValue, getSuggestions = _m.getSuggestions;\n    var handleFilterChange = useCallback(function (eventOrValue) {\n        var event = eventOrValue;\n        var value = event.target\n            ? event.target.value\n            : eventOrValue;\n        setFilterValue(value);\n        if (setFilter) {\n            setFilter(value);\n        }\n    }, [setFilter, setFilterValue]);\n    // We must reset the filter every time the value changes to ensure we\n    // display at least some choices even if the input has a value.\n    // Otherwise, it would only display the currently selected one and the user\n    // would have to first clear the input before seeing any other choices\n    useEffect(function () {\n        handleFilterChange('');\n    }, [input.value, handleFilterChange]);\n    var handleKeyDown = useCallback(function (event) {\n        // Remove latest item from array when user hits backspace with no text\n        if (selectedItems.length &&\n            !filterValue.length &&\n            event.key === 'Backspace') {\n            var newSelectedItems = selectedItems.slice(0, selectedItems.length - 1);\n            input.onChange(newSelectedItems.map(getChoiceValue));\n        }\n    }, [filterValue.length, getChoiceValue, input, selectedItems]);\n    var handleChange = useCallback(function (item) {\n        var newSelectedItems = !allowDuplicates && selectedItems.includes(item)\n            ? selectedItems.slice() : selectedItems.concat([item]);\n        setFilterValue('');\n        input.onChange(newSelectedItems.map(getChoiceValue));\n    }, [allowDuplicates, getChoiceValue, input, selectedItems, setFilterValue]);\n    var handleDelete = useCallback(function (item) { return function () {\n        var newSelectedItems = selectedItems.slice();\n        newSelectedItems.splice(newSelectedItems.indexOf(item), 1);\n        input.onChange(newSelectedItems.map(getChoiceValue));\n    }; }, [input, selectedItems, getChoiceValue]);\n    // This function ensures that the suggestion list stay aligned to the\n    // input element even if it moves (because user scrolled for example)\n    var updateAnchorEl = function () {\n        if (!inputEl.current) {\n            return;\n        }\n        var inputPosition = inputEl.current.getBoundingClientRect();\n        // It works by implementing a mock element providing the only method used\n        // by the PopOver component, getBoundingClientRect, which will return a\n        // position based on the input position\n        if (!anchorEl.current) {\n            anchorEl.current = { getBoundingClientRect: function () { return inputPosition; } };\n        }\n        else {\n            var anchorPosition = anchorEl.current.getBoundingClientRect();\n            if (anchorPosition.x !== inputPosition.x ||\n                anchorPosition.y !== inputPosition.y) {\n                anchorEl.current = {\n                    getBoundingClientRect: function () { return inputPosition; },\n                };\n            }\n        }\n    };\n    var storeInputRef = function (input) {\n        inputEl.current = input;\n        updateAnchorEl();\n    };\n    var handleBlur = useCallback(function (event) {\n        setFilterValue('');\n        handleFilterChange('');\n        input.onBlur(event);\n    }, [handleFilterChange, input, setFilterValue]);\n    var handleFocus = useCallback(function (openMenu) { return function (event) {\n        openMenu(event);\n        input.onFocus(event);\n    }; }, [input]);\n    var handleClick = useCallback(function (openMenu) { return function (event) {\n        if (event.target === inputEl.current) {\n            openMenu(event);\n        }\n    }; }, []);\n    var shouldRenderSuggestions = function (val) {\n        if (shouldRenderSuggestionsOverride !== undefined &&\n            typeof shouldRenderSuggestionsOverride === 'function') {\n            return shouldRenderSuggestionsOverride(val);\n        }\n        return true;\n    };\n    return (React.createElement(Downshift, __assign({ inputValue: filterValue, onChange: handleChange, selectedItem: selectedItems, itemToString: function (item) { return getChoiceValue(item); } }, rest), function (_a) {\n        var _b, _c;\n        var getInputProps = _a.getInputProps, getItemProps = _a.getItemProps, getLabelProps = _a.getLabelProps, getMenuProps = _a.getMenuProps, isOpen = _a.isOpen, suggestionFilter = _a.inputValue, highlightedIndex = _a.highlightedIndex, openMenu = _a.openMenu;\n        var isMenuOpen = isOpen && shouldRenderSuggestions(suggestionFilter);\n        var _d = getInputProps({\n            onBlur: handleBlur,\n            onFocus: handleFocus(openMenu),\n            onClick: handleClick(openMenu),\n            onKeyDown: handleKeyDown,\n        }), idFromDownshift = _d.id, onBlur = _d.onBlur, onChange = _d.onChange, onFocus = _d.onFocus, ref = _d.ref, inputProps = __rest(_d, [\"id\", \"onBlur\", \"onChange\", \"onFocus\", \"ref\"]);\n        return (React.createElement(\"div\", { className: classes.container },\n            React.createElement(TextField, __assign({ id: id, fullWidth: fullWidth, InputProps: {\n                    inputRef: storeInputRef,\n                    classes: {\n                        root: classNames(classes.inputRoot, (_b = {},\n                            _b[classes.inputRootFilled] = variant === 'filled',\n                            _b)),\n                        input: classes.inputInput,\n                    },\n                    startAdornment: (React.createElement(\"div\", { className: classNames((_c = {},\n                            _c[classes.chipContainerFilled] = variant === 'filled',\n                            _c)) }, selectedItems.map(function (item, index) { return (React.createElement(Chip, { key: index, tabIndex: -1, label: getChoiceText(item), className: classes.chip, onDelete: handleDelete(item) })); }))),\n                    onBlur: onBlur,\n                    onChange: function (event) {\n                        handleFilterChange(event);\n                        onChange(event);\n                    },\n                    onFocus: onFocus,\n                }, error: !!(touched && error), label: React.createElement(FieldTitle, __assign({ label: label }, labelProps, { source: source, resource: resource, isRequired: typeof isRequiredOverride !==\n                        'undefined'\n                        ? isRequiredOverride\n                        : isRequired })), InputLabelProps: getLabelProps({\n                    htmlFor: id,\n                }), helperText: (touched && error) || helperText ? (React.createElement(InputHelperText, { touched: touched, error: error, helperText: helperText })) : null, variant: variant, margin: margin }, inputProps, options)),\n            React.createElement(AutocompleteSuggestionList, { isOpen: isMenuOpen, menuProps: getMenuProps({}, \n                // https://github.com/downshift-js/downshift/issues/235\n                { suppressRefError: true }), inputEl: inputEl.current, suggestionsContainerProps: suggestionsContainerProps }, getSuggestions(suggestionFilter).map(function (suggestion, index) { return (React.createElement(AutocompleteSuggestionItem, __assign({ key: getChoiceValue(suggestion), suggestion: suggestion, index: index, highlightedIndex: highlightedIndex, isSelected: selectedItems\n                    .map(getChoiceValue)\n                    .includes(getChoiceValue(suggestion)), filterValue: filterValue, getSuggestionText: getChoiceText }, getItemProps({\n                item: suggestion,\n            })))); }))));\n    }));\n};\nvar useStyles = makeStyles(function (theme) {\n    var chipBackgroundColor = theme.palette.type === 'light'\n        ? 'rgba(0, 0, 0, 0.09)'\n        : 'rgba(255, 255, 255, 0.09)';\n    return {\n        root: {\n            flexGrow: 1,\n            height: 250,\n        },\n        container: {\n            flexGrow: 1,\n            position: 'relative',\n        },\n        paper: {\n            position: 'absolute',\n            zIndex: 1,\n            marginTop: theme.spacing(1),\n            left: 0,\n            right: 0,\n        },\n        chip: {\n            margin: theme.spacing(0.5, 0.5, 0.5, 0),\n        },\n        chipContainerFilled: {\n            margin: '27px 12px 10px 0',\n        },\n        inputRoot: {\n            flexWrap: 'wrap',\n        },\n        inputRootFilled: {\n            flexWrap: 'wrap',\n            '& $chip': {\n                backgroundColor: chipBackgroundColor,\n            },\n        },\n        inputInput: {\n            width: 'auto',\n            flexGrow: 1,\n        },\n        divider: {\n            height: theme.spacing(2),\n        },\n    };\n}, { name: 'RaAutocompleteArrayInput' });\nexport default AutocompleteArrayInput;\n"]},"metadata":{},"sourceType":"module"}