{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Children, cloneElement, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useReferenceArrayFieldController } from 'ra-core';\nimport { fieldPropTypes } from './types';\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n */\n\nvar ReferenceArrayField = function (_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceArrayField> only accepts a single child (like <Datagrid>)');\n  }\n\n  return React.createElement(PureReferenceArrayFieldView, __assign({}, props, useReferenceArrayFieldController(props)), children);\n};\n\nReferenceArrayField.propTypes = __assign({}, fieldPropTypes, {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  label: PropTypes.string,\n  record: PropTypes.object,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  source: PropTypes.string.isRequired\n});\nReferenceArrayField.defaultProps = {\n  addLabel: true\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    progress: {\n      marginTop: theme.spacing(2)\n    }\n  };\n}, {\n  name: 'RaReferenceArrayField'\n});\nexport var ReferenceArrayFieldView = function (_a) {\n  var children = _a.children,\n      className = _a.className,\n      classesOverride = _a.classes,\n      data = _a.data,\n      ids = _a.ids,\n      loaded = _a.loaded,\n      reference = _a.reference,\n      referenceBasePath = _a.referenceBasePath;\n  var classes = useStyles({\n    classes: classesOverride\n  });\n\n  if (!loaded) {\n    return React.createElement(LinearProgress, {\n      className: classes.progress\n    });\n  }\n\n  return cloneElement(Children.only(children), {\n    className: className,\n    resource: reference,\n    ids: ids,\n    data: data,\n    loaded: loaded,\n    basePath: referenceBasePath,\n    currentSort: {}\n  });\n};\nReferenceArrayFieldView.propTypes = {\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  data: PropTypes.object,\n  ids: PropTypes.array,\n  loaded: PropTypes.bool,\n  children: PropTypes.element.isRequired,\n  reference: PropTypes.string.isRequired,\n  referenceBasePath: PropTypes.string\n};\nvar PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);\nexport default ReferenceArrayField;","map":{"version":3,"sources":["/home/ubuntu/truck-rewards/node_modules/ra-ui-materialui/esm/field/ReferenceArrayField.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","Children","cloneElement","memo","PropTypes","LinearProgress","makeStyles","useReferenceArrayFieldController","fieldPropTypes","ReferenceArrayField","_a","children","props","count","Error","createElement","PureReferenceArrayFieldView","propTypes","addLabel","bool","basePath","string","classes","object","className","element","isRequired","label","record","reference","resource","sortBy","source","defaultProps","useStyles","theme","progress","marginTop","spacing","name","ReferenceArrayFieldView","classesOverride","data","ids","loaded","referenceBasePath","only","currentSort","array"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { Children, cloneElement, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useReferenceArrayFieldController } from 'ra-core';\nimport { fieldPropTypes } from './types';\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n */\nvar ReferenceArrayField = function (_a) {\n    var children = _a.children, props = __rest(_a, [\"children\"]);\n    if (React.Children.count(children) !== 1) {\n        throw new Error('<ReferenceArrayField> only accepts a single child (like <Datagrid>)');\n    }\n    return (React.createElement(PureReferenceArrayFieldView, __assign({}, props, useReferenceArrayFieldController(props)), children));\n};\nReferenceArrayField.propTypes = __assign({}, fieldPropTypes, { addLabel: PropTypes.bool, basePath: PropTypes.string, classes: PropTypes.object, className: PropTypes.string, children: PropTypes.element.isRequired, label: PropTypes.string, record: PropTypes.object, reference: PropTypes.string.isRequired, resource: PropTypes.string, sortBy: PropTypes.string, source: PropTypes.string.isRequired });\nReferenceArrayField.defaultProps = {\n    addLabel: true,\n};\nvar useStyles = makeStyles(function (theme) { return ({\n    progress: { marginTop: theme.spacing(2) },\n}); }, { name: 'RaReferenceArrayField' });\nexport var ReferenceArrayFieldView = function (_a) {\n    var children = _a.children, className = _a.className, classesOverride = _a.classes, data = _a.data, ids = _a.ids, loaded = _a.loaded, reference = _a.reference, referenceBasePath = _a.referenceBasePath;\n    var classes = useStyles({ classes: classesOverride });\n    if (!loaded) {\n        return React.createElement(LinearProgress, { className: classes.progress });\n    }\n    return cloneElement(Children.only(children), {\n        className: className,\n        resource: reference,\n        ids: ids,\n        data: data,\n        loaded: loaded,\n        basePath: referenceBasePath,\n        currentSort: {},\n    });\n};\nReferenceArrayFieldView.propTypes = {\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    data: PropTypes.object,\n    ids: PropTypes.array,\n    loaded: PropTypes.bool,\n    children: PropTypes.element.isRequired,\n    reference: PropTypes.string.isRequired,\n    referenceBasePath: PropTypes.string,\n};\nvar PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);\nexport default ReferenceArrayField;\n"]},"metadata":{},"sourceType":"module"}