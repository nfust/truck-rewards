{"ast":null,"code":"import { useCallback } from 'react';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { useLocation, useHistory } from 'react-router-dom';\n/**\n * Get a callback for calling the authProvider.login() method\n * and redirect to the previous authenticated page (or the home page) on success.\n *\n * @see useAuthProvider\n *\n * @returns {Function} login callback\n *\n * @example\n *\n * import { useLogin } from 'react-admin';\n *\n * const LoginButton = () => {\n *     const [loading, setLoading] = useState(false);\n *     const login = useLogin();\n *     const handleClick = {\n *         setLoading(true);\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\n *             .then(() => setLoading(false));\n *     }\n *     return <button onClick={handleClick}>Login</button>;\n * }\n */\n\nvar useLogin = function () {\n  var authProvider = useAuthProvider();\n  var location = useLocation();\n  var history = useHistory();\n  var nextPathName = location.state && location.state.nextPathname;\n  var login = useCallback(function (params, pathName) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (pathName === void 0) {\n      pathName = defaultAuthParams.afterLoginUrl;\n    }\n\n    return authProvider.login(params).then(function (ret) {\n      history.push(nextPathName || pathName);\n      return ret;\n    });\n  }, [authProvider, history, nextPathName]);\n  var loginWithoutProvider = useCallback(function (_, __) {\n    history.push(defaultAuthParams.afterLoginUrl);\n    return Promise.resolve();\n  }, [history]);\n  return authProvider ? login : loginWithoutProvider;\n};\n\nexport default useLogin;","map":{"version":3,"sources":["/home/ubuntu/truck-rewards/node_modules/ra-core/esm/auth/useLogin.js"],"names":["useCallback","useAuthProvider","defaultAuthParams","useLocation","useHistory","useLogin","authProvider","location","history","nextPathName","state","nextPathname","login","params","pathName","afterLoginUrl","then","ret","push","loginWithoutProvider","_","__","Promise","resolve"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,eAAP,IAA0BC,iBAA1B,QAAmD,mBAAnD;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,kBAAxC;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAIC,QAAQ,GAAG,YAAY;AACvB,MAAIC,YAAY,GAAGL,eAAe,EAAlC;AACA,MAAIM,QAAQ,GAAGJ,WAAW,EAA1B;AACA,MAAIK,OAAO,GAAGJ,UAAU,EAAxB;AACA,MAAIK,YAAY,GAAGF,QAAQ,CAACG,KAAT,IAAkBH,QAAQ,CAACG,KAAT,CAAeC,YAApD;AACA,MAAIC,KAAK,GAAGZ,WAAW,CAAC,UAAUa,MAAV,EAAkBC,QAAlB,EAA4B;AAChD,QAAID,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,MAAAA,MAAM,GAAG,EAAT;AAAc;;AACvC,QAAIC,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,MAAAA,QAAQ,GAAGZ,iBAAiB,CAACa,aAA7B;AAA6C;;AACxE,WAAOT,YAAY,CAACM,KAAb,CAAmBC,MAAnB,EAA2BG,IAA3B,CAAgC,UAAUC,GAAV,EAAe;AAClDT,MAAAA,OAAO,CAACU,IAAR,CAAaT,YAAY,IAAIK,QAA7B;AACA,aAAOG,GAAP;AACH,KAHM,CAAP;AAIH,GAPsB,EAOpB,CAACX,YAAD,EAAeE,OAAf,EAAwBC,YAAxB,CAPoB,CAAvB;AAQA,MAAIU,oBAAoB,GAAGnB,WAAW,CAAC,UAAUoB,CAAV,EAAaC,EAAb,EAAiB;AACpDb,IAAAA,OAAO,CAACU,IAAR,CAAahB,iBAAiB,CAACa,aAA/B;AACA,WAAOO,OAAO,CAACC,OAAR,EAAP;AACH,GAHqC,EAGnC,CAACf,OAAD,CAHmC,CAAtC;AAIA,SAAOF,YAAY,GAAGM,KAAH,GAAWO,oBAA9B;AACH,CAlBD;;AAmBA,eAAed,QAAf","sourcesContent":["import { useCallback } from 'react';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { useLocation, useHistory } from 'react-router-dom';\n/**\n * Get a callback for calling the authProvider.login() method\n * and redirect to the previous authenticated page (or the home page) on success.\n *\n * @see useAuthProvider\n *\n * @returns {Function} login callback\n *\n * @example\n *\n * import { useLogin } from 'react-admin';\n *\n * const LoginButton = () => {\n *     const [loading, setLoading] = useState(false);\n *     const login = useLogin();\n *     const handleClick = {\n *         setLoading(true);\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\n *             .then(() => setLoading(false));\n *     }\n *     return <button onClick={handleClick}>Login</button>;\n * }\n */\nvar useLogin = function () {\n    var authProvider = useAuthProvider();\n    var location = useLocation();\n    var history = useHistory();\n    var nextPathName = location.state && location.state.nextPathname;\n    var login = useCallback(function (params, pathName) {\n        if (params === void 0) { params = {}; }\n        if (pathName === void 0) { pathName = defaultAuthParams.afterLoginUrl; }\n        return authProvider.login(params).then(function (ret) {\n            history.push(nextPathName || pathName);\n            return ret;\n        });\n    }, [authProvider, history, nextPathName]);\n    var loginWithoutProvider = useCallback(function (_, __) {\n        history.push(defaultAuthParams.afterLoginUrl);\n        return Promise.resolve();\n    }, [history]);\n    return authProvider ? login : loginWithoutProvider;\n};\nexport default useLogin;\n"]},"metadata":{},"sourceType":"module"}