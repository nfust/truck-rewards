{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useMemo, useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport difference from 'lodash/difference';\nimport { useGetMany } from '../../dataProvider';\nimport useGetMatching from '../../dataProvider/useGetMatching';\nimport { useTranslate } from '../../i18n';\nimport { getStatusForArrayInput as getDataStatus } from './referenceDataStatus';\n/**\n * Prepare data for the ReferenceArrayInput components\n *\n * @example\n *\n * const { choices, error, loaded, loading } = useReferenceArrayInputController({\n *      basePath: 'resource';\n *      record: { referenceIds: ['id1', 'id2']};\n *      reference: 'reference';\n *      resource: 'resource';\n *      source: 'referenceIds';\n * });\n *\n * @param {Object} option\n * @param {string} option.basePath basepath to current resource\n * @param {Object} option.record The The current resource record\n * @param {string} option.reference The linked resource name\n * @param {string} option.resource The current resource name\n * @param {string} option.source The key of the linked resource identifier\n *\n * @return {Object} controllerProps Fetched data and callbacks for the ReferenceArrayInput components\n */\n\nvar useReferenceArrayInputController = function (_a) {\n  var defaultFilter = _a.filter,\n      _b = _a.filterToQuery,\n      filterToQuery = _b === void 0 ? defaultFilterToQuery : _b,\n      input = _a.input,\n      _c = _a.perPage,\n      perPage = _c === void 0 ? 25 : _c,\n      _d = _a.sort,\n      defaultSort = _d === void 0 ? {\n    field: 'id',\n    order: 'DESC'\n  } : _d,\n      options = _a.options,\n      reference = _a.reference,\n      resource = _a.resource,\n      source = _a.source;\n  var translate = useTranslate(); // We store the current input value in a ref so that we are able to fetch\n  // only the missing references when the input value changes\n\n  var inputValue = useRef(input.value);\n\n  var _e = useState(input.value),\n      idsToFetch = _e[0],\n      setIdsToFetch = _e[1];\n\n  var _f = useState([]),\n      idsToGetFromStore = _f[0],\n      setIdsToGetFromStore = _f[1];\n\n  var referenceRecordsFromStore = useSelector(function (state) {\n    return idsToGetFromStore.map(function (id) {\n      return state.admin.resources[reference].data[id];\n    });\n  }); // optimization: we fetch selected items only once. When the user selects more items,\n  // as we already have the past selected items in the store, we don't fetch them.\n\n  useEffect(function () {\n    var newIdsToFetch = difference(input.value, inputValue.current);\n\n    if (newIdsToFetch.length > 0) {\n      setIdsToFetch(newIdsToFetch);\n      setIdsToGetFromStore(inputValue.current || []);\n    }\n\n    inputValue.current = input.value;\n  }, [input.value, setIdsToFetch]);\n\n  var _g = useState({\n    page: 1,\n    perPage: perPage\n  }),\n      pagination = _g[0],\n      setPagination = _g[1];\n\n  var _h = useState(defaultSort),\n      sort = _h[0],\n      setSort = _h[1];\n\n  var _j = useState(''),\n      filter = _j[0],\n      setFilter = _j[1]; // Ensure sort can be updated through props too, not just by using the setSort function\n\n\n  useEffect(function () {\n    if (!isEqual(defaultSort, sort)) {\n      setSort(defaultSort);\n    }\n  }, [setSort, defaultSort, sort]); // Ensure pagination can be updated through props too, not just by using the setPagination function\n\n  useEffect(function () {\n    var newPagination = {\n      page: 1,\n      perPage: perPage\n    };\n\n    if (!isEqual(newPagination, pagination)) {\n      setPagination(newPagination);\n    }\n  }, [setPagination, perPage, pagination]); // Merge the user filters with the default ones\n\n  var finalFilter = useMemo(function () {\n    return __assign({}, defaultFilter, filterToQuery(filter));\n  }, [defaultFilter, filter, filterToQuery]);\n\n  var _k = useGetMany(reference, idsToFetch || []),\n      referenceRecordsFetched = _k.data,\n      loaded = _k.loaded;\n\n  var referenceRecords = referenceRecordsFetched ? referenceRecordsFetched.concat(referenceRecordsFromStore) : referenceRecordsFromStore; // filter out not found references - happens when the dataProvider doesn't guarantee referential integrity\n\n  var finalReferenceRecords = referenceRecords.filter(Boolean);\n  var matchingReferences = useGetMatching(reference, pagination, sort, finalFilter, source, resource, options).data; // We merge the currently selected records with the matching ones, otherwise\n  // the component displaying the currently selected records may fail\n\n  var finalMatchingReferences = matchingReferences && matchingReferences.length > 0 ? mergeReferences(matchingReferences, finalReferenceRecords) : finalReferenceRecords.length > 0 ? finalReferenceRecords : matchingReferences;\n  var dataStatus = getDataStatus({\n    input: input,\n    matchingReferences: finalMatchingReferences,\n    referenceRecords: finalReferenceRecords,\n    translate: translate\n  });\n  return {\n    choices: dataStatus.choices,\n    error: dataStatus.error,\n    loaded: loaded,\n    loading: dataStatus.waiting,\n    setFilter: setFilter,\n    setPagination: setPagination,\n    setSort: setSort,\n    warning: dataStatus.warning\n  };\n}; // concatenate and deduplicate two lists of records\n\n\nvar mergeReferences = function (ref1, ref2) {\n  var res = ref1.slice();\n  var ids = ref1.map(function (ref) {\n    return ref.id;\n  });\n  ref2.forEach(function (ref) {\n    if (!ids.includes(ref.id)) {\n      ids.push(ref.id);\n      res.push(ref);\n    }\n  });\n  return res;\n};\n\nexport default useReferenceArrayInputController;\n\nvar defaultFilterToQuery = function (searchText) {\n  return {\n    q: searchText\n  };\n};","map":{"version":3,"sources":["/home/ubuntu/truck-rewards/node_modules/ra-core/esm/controller/input/useReferenceArrayInputController.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","useMemo","useState","useEffect","useRef","useSelector","isEqual","difference","useGetMany","useGetMatching","useTranslate","getStatusForArrayInput","getDataStatus","useReferenceArrayInputController","_a","defaultFilter","filter","_b","filterToQuery","defaultFilterToQuery","input","_c","perPage","_d","sort","defaultSort","field","order","options","reference","resource","source","translate","inputValue","value","_e","idsToFetch","setIdsToFetch","_f","idsToGetFromStore","setIdsToGetFromStore","referenceRecordsFromStore","state","map","id","admin","resources","data","newIdsToFetch","current","_g","page","pagination","setPagination","_h","setSort","_j","setFilter","newPagination","finalFilter","_k","referenceRecordsFetched","loaded","referenceRecords","concat","finalReferenceRecords","Boolean","matchingReferences","finalMatchingReferences","mergeReferences","dataStatus","choices","error","loading","waiting","warning","ref1","ref2","res","slice","ids","ref","forEach","includes","push","searchText","q"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useMemo, useState, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport difference from 'lodash/difference';\nimport { useGetMany } from '../../dataProvider';\nimport useGetMatching from '../../dataProvider/useGetMatching';\nimport { useTranslate } from '../../i18n';\nimport { getStatusForArrayInput as getDataStatus } from './referenceDataStatus';\n/**\n * Prepare data for the ReferenceArrayInput components\n *\n * @example\n *\n * const { choices, error, loaded, loading } = useReferenceArrayInputController({\n *      basePath: 'resource';\n *      record: { referenceIds: ['id1', 'id2']};\n *      reference: 'reference';\n *      resource: 'resource';\n *      source: 'referenceIds';\n * });\n *\n * @param {Object} option\n * @param {string} option.basePath basepath to current resource\n * @param {Object} option.record The The current resource record\n * @param {string} option.reference The linked resource name\n * @param {string} option.resource The current resource name\n * @param {string} option.source The key of the linked resource identifier\n *\n * @return {Object} controllerProps Fetched data and callbacks for the ReferenceArrayInput components\n */\nvar useReferenceArrayInputController = function (_a) {\n    var defaultFilter = _a.filter, _b = _a.filterToQuery, filterToQuery = _b === void 0 ? defaultFilterToQuery : _b, input = _a.input, _c = _a.perPage, perPage = _c === void 0 ? 25 : _c, _d = _a.sort, defaultSort = _d === void 0 ? { field: 'id', order: 'DESC' } : _d, options = _a.options, reference = _a.reference, resource = _a.resource, source = _a.source;\n    var translate = useTranslate();\n    // We store the current input value in a ref so that we are able to fetch\n    // only the missing references when the input value changes\n    var inputValue = useRef(input.value);\n    var _e = useState(input.value), idsToFetch = _e[0], setIdsToFetch = _e[1];\n    var _f = useState([]), idsToGetFromStore = _f[0], setIdsToGetFromStore = _f[1];\n    var referenceRecordsFromStore = useSelector(function (state) {\n        return idsToGetFromStore.map(function (id) { return state.admin.resources[reference].data[id]; });\n    });\n    // optimization: we fetch selected items only once. When the user selects more items,\n    // as we already have the past selected items in the store, we don't fetch them.\n    useEffect(function () {\n        var newIdsToFetch = difference(input.value, inputValue.current);\n        if (newIdsToFetch.length > 0) {\n            setIdsToFetch(newIdsToFetch);\n            setIdsToGetFromStore(inputValue.current || []);\n        }\n        inputValue.current = input.value;\n    }, [input.value, setIdsToFetch]);\n    var _g = useState({ page: 1, perPage: perPage }), pagination = _g[0], setPagination = _g[1];\n    var _h = useState(defaultSort), sort = _h[0], setSort = _h[1];\n    var _j = useState(''), filter = _j[0], setFilter = _j[1];\n    // Ensure sort can be updated through props too, not just by using the setSort function\n    useEffect(function () {\n        if (!isEqual(defaultSort, sort)) {\n            setSort(defaultSort);\n        }\n    }, [setSort, defaultSort, sort]);\n    // Ensure pagination can be updated through props too, not just by using the setPagination function\n    useEffect(function () {\n        var newPagination = {\n            page: 1,\n            perPage: perPage,\n        };\n        if (!isEqual(newPagination, pagination)) {\n            setPagination(newPagination);\n        }\n    }, [setPagination, perPage, pagination]);\n    // Merge the user filters with the default ones\n    var finalFilter = useMemo(function () { return (__assign({}, defaultFilter, filterToQuery(filter))); }, [defaultFilter, filter, filterToQuery]);\n    var _k = useGetMany(reference, idsToFetch || []), referenceRecordsFetched = _k.data, loaded = _k.loaded;\n    var referenceRecords = referenceRecordsFetched\n        ? referenceRecordsFetched.concat(referenceRecordsFromStore)\n        : referenceRecordsFromStore;\n    // filter out not found references - happens when the dataProvider doesn't guarantee referential integrity\n    var finalReferenceRecords = referenceRecords.filter(Boolean);\n    var matchingReferences = useGetMatching(reference, pagination, sort, finalFilter, source, resource, options).data;\n    // We merge the currently selected records with the matching ones, otherwise\n    // the component displaying the currently selected records may fail\n    var finalMatchingReferences = matchingReferences && matchingReferences.length > 0\n        ? mergeReferences(matchingReferences, finalReferenceRecords)\n        : finalReferenceRecords.length > 0\n            ? finalReferenceRecords\n            : matchingReferences;\n    var dataStatus = getDataStatus({\n        input: input,\n        matchingReferences: finalMatchingReferences,\n        referenceRecords: finalReferenceRecords,\n        translate: translate,\n    });\n    return {\n        choices: dataStatus.choices,\n        error: dataStatus.error,\n        loaded: loaded,\n        loading: dataStatus.waiting,\n        setFilter: setFilter,\n        setPagination: setPagination,\n        setSort: setSort,\n        warning: dataStatus.warning,\n    };\n};\n// concatenate and deduplicate two lists of records\nvar mergeReferences = function (ref1, ref2) {\n    var res = ref1.slice();\n    var ids = ref1.map(function (ref) { return ref.id; });\n    ref2.forEach(function (ref) {\n        if (!ids.includes(ref.id)) {\n            ids.push(ref.id);\n            res.push(ref);\n        }\n    });\n    return res;\n};\nexport default useReferenceArrayInputController;\nvar defaultFilterToQuery = function (searchText) { return ({ q: searchText }); };\n"]},"metadata":{},"sourceType":"module"}