{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useCallback, useEffect, useRef, useState, useMemo, isValidElement } from 'react';\nimport Downshift from 'downshift';\nimport get from 'lodash/get';\nimport { makeStyles, TextField } from '@material-ui/core';\nimport { useInput, FieldTitle, useSuggestions, warning } from 'ra-core';\nimport InputHelperText from './InputHelperText';\nimport AutocompleteSuggestionList from './AutocompleteSuggestionList';\nimport AutocompleteSuggestionItem from './AutocompleteSuggestionItem';\n/**\n * An Input component for an autocomplete field, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <AutocompleteInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * Note that you must also specify the `matchSuggestion` prop\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue);\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <SelectInput source=\"gender\" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} />\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <AutocompleteInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <TextField> component\n *\n * @example\n * <AutocompleteInput source=\"author_id\" options={{ color: 'secondary', InputLabelProps: { shrink: true } }} />\n */\n\nvar AutocompleteInput = function (_a) {\n  var allowEmpty = _a.allowEmpty,\n      className = _a.className,\n      classesOverride = _a.classes,\n      _b = _a.choices,\n      choices = _b === void 0 ? [] : _b,\n      emptyText = _a.emptyText,\n      emptyValue = _a.emptyValue,\n      format = _a.format,\n      fullWidth = _a.fullWidth,\n      helperText = _a.helperText,\n      idOverride = _a.id,\n      inputOverride = _a.input,\n      isRequiredOverride = _a.isRequired,\n      label = _a.label,\n      limitChoicesToValue = _a.limitChoicesToValue,\n      _c = _a.margin,\n      margin = _c === void 0 ? 'dense' : _c,\n      matchSuggestion = _a.matchSuggestion,\n      metaOverride = _a.meta,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      onFocus = _a.onFocus,\n      _d = _a.options,\n      _e = _d === void 0 ? {\n    suggestionsContainerProps: undefined,\n    labelProps: undefined,\n    InputProps: undefined\n  } : _d,\n      suggestionsContainerProps = _e.suggestionsContainerProps,\n      labelProps = _e.labelProps,\n      InputProps = _e.InputProps,\n      options = __rest(_e, [\"suggestionsContainerProps\", \"labelProps\", \"InputProps\"]),\n      _f = _a.optionText,\n      optionText = _f === void 0 ? 'name' : _f,\n      _g = _a.optionValue,\n      optionValue = _g === void 0 ? 'id' : _g,\n      parse = _a.parse,\n      resource = _a.resource,\n      setFilter = _a.setFilter,\n      shouldRenderSuggestionsOverride = _a.shouldRenderSuggestions,\n      source = _a.source,\n      suggestionLimit = _a.suggestionLimit,\n      _h = _a.translateChoice,\n      translateChoice = _h === void 0 ? true : _h,\n      validate = _a.validate,\n      _j = _a.variant,\n      variant = _j === void 0 ? 'filled' : _j,\n      rest = __rest(_a, [\"allowEmpty\", \"className\", \"classes\", \"choices\", \"emptyText\", \"emptyValue\", \"format\", \"fullWidth\", \"helperText\", \"id\", \"input\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"margin\", \"matchSuggestion\", \"meta\", \"onBlur\", \"onChange\", \"onFocus\", \"options\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"setFilter\", \"shouldRenderSuggestions\", \"source\", \"suggestionLimit\", \"translateChoice\", \"validate\", \"variant\"]);\n\n  warning(isValidElement(optionText) && !matchSuggestion, \"If the optionText prop is a React element, you must also specify the matchSuggestion prop:\\n<AutocompleteInput\\n    matchSuggestion={(filterValue, suggestion) => true}\\n/>\\n        \");\n  var classes = useStyles({\n    classes: classesOverride\n  });\n  var inputEl = useRef();\n  var anchorEl = useRef();\n\n  var _k = useInput(__assign({\n    format: format,\n    id: idOverride,\n    input: inputOverride,\n    meta: metaOverride,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    parse: parse,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      id = _k.id,\n      input = _k.input,\n      isRequired = _k.isRequired,\n      _l = _k.meta,\n      touched = _l.touched,\n      error = _l.error;\n\n  var _m = useState(''),\n      filterValue = _m[0],\n      setFilterValue = _m[1];\n\n  var getSuggestionFromValue = useCallback(function (value) {\n    return choices.find(function (choice) {\n      return get(choice, optionValue) === value;\n    });\n  }, [choices, optionValue]);\n  var selectedItem = useMemo(function () {\n    return getSuggestionFromValue(input.value) || null;\n  }, [input.value, getSuggestionFromValue]);\n\n  var _o = useSuggestions({\n    allowEmpty: allowEmpty,\n    choices: choices,\n    emptyText: emptyText,\n    emptyValue: emptyValue,\n    limitChoicesToValue: limitChoicesToValue,\n    matchSuggestion: matchSuggestion,\n    optionText: optionText,\n    optionValue: optionValue,\n    selectedItem: selectedItem,\n    suggestionLimit: suggestionLimit,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _o.getChoiceText,\n      getChoiceValue = _o.getChoiceValue,\n      getSuggestions = _o.getSuggestions;\n\n  var handleFilterChange = useCallback(function (eventOrValue) {\n    var event = eventOrValue;\n    var value = event.target ? event.target.value : eventOrValue;\n\n    if (setFilter) {\n      setFilter(value);\n    }\n  }, [setFilter]); // We must reset the filter every time the value changes to ensure we\n  // display at least some choices even if the input has a value.\n  // Otherwise, it would only display the currently selected one and the user\n  // would have to first clear the input before seeing any other choices\n\n  useEffect(function () {\n    handleFilterChange(''); // If we have a value, set the filter to its text so that\n    // Downshift displays it correctly\n\n    setFilterValue(input.value ? getChoiceText(selectedItem) : '');\n  }, [input.value, handleFilterChange, selectedItem, getChoiceText]);\n  var handleChange = useCallback(function (item) {\n    input.onChange(getChoiceValue(item));\n  }, [getChoiceValue, input]); // This function ensures that the suggestion list stay aligned to the\n  // input element even if it moves (because user scrolled for example)\n\n  var updateAnchorEl = function () {\n    if (!inputEl.current) {\n      return;\n    }\n\n    var inputPosition = inputEl.current.getBoundingClientRect(); // It works by implementing a mock element providing the only method used\n    // by the PopOver component, getBoundingClientRect, which will return a\n    // position based on the input position\n\n    if (!anchorEl.current) {\n      anchorEl.current = {\n        getBoundingClientRect: function () {\n          return inputPosition;\n        }\n      };\n    } else {\n      var anchorPosition = anchorEl.current.getBoundingClientRect();\n\n      if (anchorPosition.x !== inputPosition.x || anchorPosition.y !== inputPosition.y) {\n        anchorEl.current = {\n          getBoundingClientRect: function () {\n            return inputPosition;\n          }\n        };\n      }\n    }\n  };\n\n  var storeInputRef = function (input) {\n    inputEl.current = input;\n    updateAnchorEl();\n  };\n\n  var handleBlur = useCallback(function (event) {\n    handleFilterChange(''); // If we had a value before, set the filter back to its text so that\n    // Downshift displays it correctly\n\n    setFilterValue(input.value ? getChoiceText(selectedItem) : '');\n    input.onBlur(event);\n  }, [getChoiceText, handleFilterChange, input, selectedItem]);\n  var handleFocus = useCallback(function (openMenu) {\n    return function (event) {\n      openMenu(event);\n      input.onFocus(event);\n    };\n  }, [input]);\n\n  var shouldRenderSuggestions = function (val) {\n    if (shouldRenderSuggestionsOverride !== undefined && typeof shouldRenderSuggestionsOverride === 'function') {\n      return shouldRenderSuggestionsOverride(val);\n    }\n\n    return true;\n  };\n\n  return React.createElement(Downshift, __assign({\n    inputValue: filterValue,\n    onChange: handleChange,\n    selectedItem: selectedItem,\n    itemToString: function (item) {\n      return getChoiceValue(item);\n    }\n  }, rest), function (_a) {\n    var getInputProps = _a.getInputProps,\n        getItemProps = _a.getItemProps,\n        getLabelProps = _a.getLabelProps,\n        getMenuProps = _a.getMenuProps,\n        isOpen = _a.isOpen,\n        highlightedIndex = _a.highlightedIndex,\n        openMenu = _a.openMenu;\n    var isMenuOpen = isOpen && shouldRenderSuggestions(filterValue);\n\n    var _b = getInputProps(__assign({\n      onBlur: handleBlur,\n      onFocus: handleFocus(openMenu)\n    }, InputProps)),\n        downshiftId = _b.id,\n        // We want to ignore this to correctly link our label and the input\n    value = _b.value,\n        onBlur = _b.onBlur,\n        onChange = _b.onChange,\n        onFocus = _b.onFocus,\n        ref = _b.ref,\n        inputProps = __rest(_b, [\"id\", \"value\", \"onBlur\", \"onChange\", \"onFocus\", \"ref\"]);\n\n    var suggestions = getSuggestions(filterValue);\n    return React.createElement(\"div\", {\n      className: classes.container\n    }, React.createElement(TextField, __assign({\n      id: id,\n      name: input.name,\n      InputProps: {\n        inputRef: storeInputRef,\n        onBlur: onBlur,\n        onChange: function (event) {\n          handleFilterChange(event);\n          setFilterValue(event.target.value);\n          onChange(event);\n        },\n        onFocus: onFocus\n      },\n      error: !!(touched && error),\n      label: React.createElement(FieldTitle, __assign({\n        label: label\n      }, labelProps, {\n        source: source,\n        resource: resource,\n        isRequired: typeof isRequiredOverride !== 'undefined' ? isRequiredOverride : isRequired\n      })),\n      InputLabelProps: getLabelProps({\n        htmlFor: id\n      }),\n      helperText: touched && error || helperText ? React.createElement(InputHelperText, {\n        touched: touched,\n        error: error,\n        helperText: helperText\n      }) : null,\n      variant: variant,\n      margin: margin,\n      fullWidth: fullWidth,\n      value: filterValue,\n      className: className\n    }, inputProps, options)), React.createElement(AutocompleteSuggestionList, {\n      isOpen: isMenuOpen,\n      menuProps: getMenuProps({}, // https://github.com/downshift-js/downshift/issues/235\n      {\n        suppressRefError: true\n      }),\n      inputEl: inputEl.current,\n      suggestionsContainerProps: suggestionsContainerProps\n    }, suggestions.map(function (suggestion, index) {\n      return React.createElement(AutocompleteSuggestionItem, __assign({\n        key: getChoiceValue(suggestion),\n        suggestion: suggestion,\n        index: index,\n        highlightedIndex: highlightedIndex,\n        isSelected: input.value === getChoiceValue(suggestion),\n        filterValue: filterValue,\n        getSuggestionText: getChoiceText\n      }, getItemProps({\n        item: suggestion\n      })));\n    })));\n  });\n};\n\nvar useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n    height: 250\n  },\n  container: {\n    flexGrow: 1,\n    position: 'relative'\n  }\n}, {\n  name: 'RaAutocompleteInput'\n});\nexport default AutocompleteInput;","map":{"version":3,"sources":["/home/ubuntu/truck-rewards/node_modules/ra-ui-materialui/esm/input/AutocompleteInput.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","useCallback","useEffect","useRef","useState","useMemo","isValidElement","Downshift","get","makeStyles","TextField","useInput","FieldTitle","useSuggestions","warning","InputHelperText","AutocompleteSuggestionList","AutocompleteSuggestionItem","AutocompleteInput","_a","allowEmpty","className","classesOverride","classes","_b","choices","emptyText","emptyValue","format","fullWidth","helperText","idOverride","id","inputOverride","input","isRequiredOverride","isRequired","label","limitChoicesToValue","_c","margin","matchSuggestion","metaOverride","meta","onBlur","onChange","onFocus","_d","options","_e","suggestionsContainerProps","undefined","labelProps","InputProps","_f","optionText","_g","optionValue","parse","resource","setFilter","shouldRenderSuggestionsOverride","shouldRenderSuggestions","source","suggestionLimit","_h","translateChoice","validate","_j","variant","rest","useStyles","inputEl","anchorEl","_k","_l","touched","error","_m","filterValue","setFilterValue","getSuggestionFromValue","value","find","choice","selectedItem","_o","getChoiceText","getChoiceValue","getSuggestions","handleFilterChange","eventOrValue","event","target","handleChange","item","updateAnchorEl","current","inputPosition","getBoundingClientRect","anchorPosition","x","y","storeInputRef","handleBlur","handleFocus","openMenu","val","createElement","inputValue","itemToString","getInputProps","getItemProps","getLabelProps","getMenuProps","isOpen","highlightedIndex","isMenuOpen","downshiftId","ref","inputProps","suggestions","container","name","inputRef","InputLabelProps","htmlFor","menuProps","suppressRefError","map","suggestion","index","key","isSelected","getSuggestionText","root","flexGrow","height","position"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { useCallback, useEffect, useRef, useState, useMemo, isValidElement, } from 'react';\nimport Downshift from 'downshift';\nimport get from 'lodash/get';\nimport { makeStyles, TextField } from '@material-ui/core';\nimport { useInput, FieldTitle, useSuggestions, warning, } from 'ra-core';\nimport InputHelperText from './InputHelperText';\nimport AutocompleteSuggestionList from './AutocompleteSuggestionList';\nimport AutocompleteSuggestionItem from './AutocompleteSuggestionItem';\n/**\n * An Input component for an autocomplete field, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <AutocompleteInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * Note that you must also specify the `matchSuggestion` prop\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue);\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <SelectInput source=\"gender\" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} />\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <AutocompleteInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <TextField> component\n *\n * @example\n * <AutocompleteInput source=\"author_id\" options={{ color: 'secondary', InputLabelProps: { shrink: true } }} />\n */\nvar AutocompleteInput = function (_a) {\n    var allowEmpty = _a.allowEmpty, className = _a.className, classesOverride = _a.classes, _b = _a.choices, choices = _b === void 0 ? [] : _b, emptyText = _a.emptyText, emptyValue = _a.emptyValue, format = _a.format, fullWidth = _a.fullWidth, helperText = _a.helperText, idOverride = _a.id, inputOverride = _a.input, isRequiredOverride = _a.isRequired, label = _a.label, limitChoicesToValue = _a.limitChoicesToValue, _c = _a.margin, margin = _c === void 0 ? 'dense' : _c, matchSuggestion = _a.matchSuggestion, metaOverride = _a.meta, onBlur = _a.onBlur, onChange = _a.onChange, onFocus = _a.onFocus, _d = _a.options, _e = _d === void 0 ? {\n        suggestionsContainerProps: undefined,\n        labelProps: undefined,\n        InputProps: undefined,\n    } : _d, suggestionsContainerProps = _e.suggestionsContainerProps, labelProps = _e.labelProps, InputProps = _e.InputProps, options = __rest(_e, [\"suggestionsContainerProps\", \"labelProps\", \"InputProps\"]), _f = _a.optionText, optionText = _f === void 0 ? 'name' : _f, _g = _a.optionValue, optionValue = _g === void 0 ? 'id' : _g, parse = _a.parse, resource = _a.resource, setFilter = _a.setFilter, shouldRenderSuggestionsOverride = _a.shouldRenderSuggestions, source = _a.source, suggestionLimit = _a.suggestionLimit, _h = _a.translateChoice, translateChoice = _h === void 0 ? true : _h, validate = _a.validate, _j = _a.variant, variant = _j === void 0 ? 'filled' : _j, rest = __rest(_a, [\"allowEmpty\", \"className\", \"classes\", \"choices\", \"emptyText\", \"emptyValue\", \"format\", \"fullWidth\", \"helperText\", \"id\", \"input\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"margin\", \"matchSuggestion\", \"meta\", \"onBlur\", \"onChange\", \"onFocus\", \"options\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"setFilter\", \"shouldRenderSuggestions\", \"source\", \"suggestionLimit\", \"translateChoice\", \"validate\", \"variant\"]);\n    warning(isValidElement(optionText) && !matchSuggestion, \"If the optionText prop is a React element, you must also specify the matchSuggestion prop:\\n<AutocompleteInput\\n    matchSuggestion={(filterValue, suggestion) => true}\\n/>\\n        \");\n    var classes = useStyles({ classes: classesOverride });\n    var inputEl = useRef();\n    var anchorEl = useRef();\n    var _k = useInput(__assign({ format: format, id: idOverride, input: inputOverride, meta: metaOverride, onBlur: onBlur,\n        onChange: onChange,\n        onFocus: onFocus,\n        parse: parse,\n        resource: resource,\n        source: source,\n        validate: validate }, rest)), id = _k.id, input = _k.input, isRequired = _k.isRequired, _l = _k.meta, touched = _l.touched, error = _l.error;\n    var _m = useState(''), filterValue = _m[0], setFilterValue = _m[1];\n    var getSuggestionFromValue = useCallback(function (value) { return choices.find(function (choice) { return get(choice, optionValue) === value; }); }, [choices, optionValue]);\n    var selectedItem = useMemo(function () { return getSuggestionFromValue(input.value) || null; }, [input.value, getSuggestionFromValue]);\n    var _o = useSuggestions({\n        allowEmpty: allowEmpty,\n        choices: choices,\n        emptyText: emptyText,\n        emptyValue: emptyValue,\n        limitChoicesToValue: limitChoicesToValue,\n        matchSuggestion: matchSuggestion,\n        optionText: optionText,\n        optionValue: optionValue,\n        selectedItem: selectedItem,\n        suggestionLimit: suggestionLimit,\n        translateChoice: translateChoice,\n    }), getChoiceText = _o.getChoiceText, getChoiceValue = _o.getChoiceValue, getSuggestions = _o.getSuggestions;\n    var handleFilterChange = useCallback(function (eventOrValue) {\n        var event = eventOrValue;\n        var value = event.target\n            ? event.target.value\n            : eventOrValue;\n        if (setFilter) {\n            setFilter(value);\n        }\n    }, [setFilter]);\n    // We must reset the filter every time the value changes to ensure we\n    // display at least some choices even if the input has a value.\n    // Otherwise, it would only display the currently selected one and the user\n    // would have to first clear the input before seeing any other choices\n    useEffect(function () {\n        handleFilterChange('');\n        // If we have a value, set the filter to its text so that\n        // Downshift displays it correctly\n        setFilterValue(input.value ? getChoiceText(selectedItem) : '');\n    }, [input.value, handleFilterChange, selectedItem, getChoiceText]);\n    var handleChange = useCallback(function (item) {\n        input.onChange(getChoiceValue(item));\n    }, [getChoiceValue, input]);\n    // This function ensures that the suggestion list stay aligned to the\n    // input element even if it moves (because user scrolled for example)\n    var updateAnchorEl = function () {\n        if (!inputEl.current) {\n            return;\n        }\n        var inputPosition = inputEl.current.getBoundingClientRect();\n        // It works by implementing a mock element providing the only method used\n        // by the PopOver component, getBoundingClientRect, which will return a\n        // position based on the input position\n        if (!anchorEl.current) {\n            anchorEl.current = { getBoundingClientRect: function () { return inputPosition; } };\n        }\n        else {\n            var anchorPosition = anchorEl.current.getBoundingClientRect();\n            if (anchorPosition.x !== inputPosition.x ||\n                anchorPosition.y !== inputPosition.y) {\n                anchorEl.current = {\n                    getBoundingClientRect: function () { return inputPosition; },\n                };\n            }\n        }\n    };\n    var storeInputRef = function (input) {\n        inputEl.current = input;\n        updateAnchorEl();\n    };\n    var handleBlur = useCallback(function (event) {\n        handleFilterChange('');\n        // If we had a value before, set the filter back to its text so that\n        // Downshift displays it correctly\n        setFilterValue(input.value ? getChoiceText(selectedItem) : '');\n        input.onBlur(event);\n    }, [getChoiceText, handleFilterChange, input, selectedItem]);\n    var handleFocus = useCallback(function (openMenu) { return function (event) {\n        openMenu(event);\n        input.onFocus(event);\n    }; }, [input]);\n    var shouldRenderSuggestions = function (val) {\n        if (shouldRenderSuggestionsOverride !== undefined &&\n            typeof shouldRenderSuggestionsOverride === 'function') {\n            return shouldRenderSuggestionsOverride(val);\n        }\n        return true;\n    };\n    return (React.createElement(Downshift, __assign({ inputValue: filterValue, onChange: handleChange, selectedItem: selectedItem, itemToString: function (item) { return getChoiceValue(item); } }, rest), function (_a) {\n        var getInputProps = _a.getInputProps, getItemProps = _a.getItemProps, getLabelProps = _a.getLabelProps, getMenuProps = _a.getMenuProps, isOpen = _a.isOpen, highlightedIndex = _a.highlightedIndex, openMenu = _a.openMenu;\n        var isMenuOpen = isOpen && shouldRenderSuggestions(filterValue);\n        var _b = getInputProps(__assign({ onBlur: handleBlur, onFocus: handleFocus(openMenu) }, InputProps)), downshiftId = _b.id, // We want to ignore this to correctly link our label and the input\n        value = _b.value, onBlur = _b.onBlur, onChange = _b.onChange, onFocus = _b.onFocus, ref = _b.ref, inputProps = __rest(_b, [\"id\", \"value\", \"onBlur\", \"onChange\", \"onFocus\", \"ref\"]);\n        var suggestions = getSuggestions(filterValue);\n        return (React.createElement(\"div\", { className: classes.container },\n            React.createElement(TextField, __assign({ id: id, name: input.name, InputProps: {\n                    inputRef: storeInputRef,\n                    onBlur: onBlur,\n                    onChange: function (event) {\n                        handleFilterChange(event);\n                        setFilterValue(event.target.value);\n                        onChange(event);\n                    },\n                    onFocus: onFocus,\n                }, error: !!(touched && error), label: React.createElement(FieldTitle, __assign({ label: label }, labelProps, { source: source, resource: resource, isRequired: typeof isRequiredOverride !==\n                        'undefined'\n                        ? isRequiredOverride\n                        : isRequired })), InputLabelProps: getLabelProps({\n                    htmlFor: id,\n                }), helperText: (touched && error) || helperText ? (React.createElement(InputHelperText, { touched: touched, error: error, helperText: helperText })) : null, variant: variant, margin: margin, fullWidth: fullWidth, value: filterValue, className: className }, inputProps, options)),\n            React.createElement(AutocompleteSuggestionList, { isOpen: isMenuOpen, menuProps: getMenuProps({}, \n                // https://github.com/downshift-js/downshift/issues/235\n                { suppressRefError: true }), inputEl: inputEl.current, suggestionsContainerProps: suggestionsContainerProps }, suggestions.map(function (suggestion, index) { return (React.createElement(AutocompleteSuggestionItem, __assign({ key: getChoiceValue(suggestion), suggestion: suggestion, index: index, highlightedIndex: highlightedIndex, isSelected: input.value ===\n                    getChoiceValue(suggestion), filterValue: filterValue, getSuggestionText: getChoiceText }, getItemProps({\n                item: suggestion,\n            })))); }))));\n    }));\n};\nvar useStyles = makeStyles({\n    root: {\n        flexGrow: 1,\n        height: 250,\n    },\n    container: {\n        flexGrow: 1,\n        position: 'relative',\n    },\n}, { name: 'RaAutocompleteInput' });\nexport default AutocompleteInput;\n"]},"metadata":{},"sourceType":"module"}